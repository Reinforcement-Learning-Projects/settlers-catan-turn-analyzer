{"version":3,"sources":["classes/Turn.js","components/Header.js","utils/helpers.js","components/StartTime.js","components/Details.js","components/GetPlayers.js","components/Timer.js","components/GetRoll.js","components/DisplayTurns.js","components/DisplayDice.js","App.js","index.js"],"names":["Turn","player","time","roll","id","this","Header","href","target","rel","padNum","num","digits","toString","padStart","secondsToStr","seconds","mins","Math","round","floor","secs","range","from","to","Array","val","index","StartTime","parsedTime","undefined","getHours","getMinutes","Details","turns","players","parsedTurns","map","turn","src","GetPlayers","initValue","setValue","useState","setPlayers","Form","Group","Label","Control","type","value","onChange","event","Button","variant","size","onClick","split","name","trim","filter","Timer","getValue","resetValue","initRunning","isRunning","setIsRunning","elapsedTime","setElapsedTime","useEffect","interval","setInterval","clearInterval","className","GetRoll","possibleRolls","selectedRoll","setSelectedRoll","rollClicked","clicked","parseInt","key","DisplayTurns","currentPlayer","cellWidthStr","length","playerTurns","averages","pid","reduce","sum","Table","striped","bordered","hover","width","idx","average","DisplayDice","rollsData","freq","height","data","dataKey","fill","App","defaultPlayers","setCurrentPlayer","setTurns","startTime","setStartTime","showDetails","setShowDetails","resetTimer","setResetTimer","timer","setTimer","resetRoll","setResetRoll","setRoll","Date","Container","fluid","Row","Col","md","xl","prevTurn","concat","nextPlayer","endTurn","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fde9373.chunk.js","sourcesContent":["class Turn {\r\n  static id = 0\r\n\r\n  constructor(player, time, roll) {\r\n    Turn.id = Turn.id + 1\r\n    \r\n    this.id = Turn.id\r\n    this.player = player\r\n    this.time = time\r\n    this.roll = roll\r\n  }\r\n}\r\n\r\nexport default Turn","import React from 'react'\r\n\r\nconst Header = () =>\r\n  <div>\r\n    <h1>Settlers of Catan Turn Analyzer</h1>\r\n    <div>\r\n    You <strong>really</strong> think that 4 came up more than the 8?\r\n    Tired of everyone \"wrongly\" claiming you take the longest turns? \r\n    Only one way to find out!\r\n    </div>\r\n    <em><a href=\"https://deanattali.com\" target=\"_blank\" rel=\"noopener noreferrer\">Dean Attali</a> &middot; April 2020</em>\r\n    <hr />\r\n  </div>\r\n\r\nexport default Header","export const padNum = (num, digits=2) => \r\n  num.toString().padStart(digits, '0')\r\n\r\nexport const secondsToStr = (seconds) => {\r\n  const mins = Math.round(Math.floor(seconds / 60))\r\n  const secs = Math.round(seconds % 60)\r\n\r\n  let str = `${padNum(mins, 1)}:${padNum(secs, 2)}`\r\n  return str\r\n}\r\n\r\nexport const range = (from, to) =>\r\n  Array.from(new Array(to - from + 1), (val, index) => index + from);\r\n","import React from 'react'\r\nimport { padNum } from '../utils/helpers'\r\n\r\nconst StartTime = ({time}) => {\r\n  const parsedTime =\r\n    (time === undefined) ?\r\n    undefined :\r\n    `${padNum(time.getHours())}:${padNum(time.getMinutes())}`\r\n\r\n  return (\r\n    <div>\r\n      Game started: {parsedTime}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StartTime","import React from 'react'\r\nimport ReactJson from 'react-json-view'\r\n\r\nconst Details = ({turns, players}) => {\r\n  const parsedTurns = turns.map(({player, time, roll}) => {\r\n    let turn = {player, time, roll}\r\n    turn.player = players[player]\r\n    return turn\r\n  })\r\n\r\n  return (\r\n    <ReactJson src={parsedTurns} />\r\n  )\r\n}\r\n\r\nexport default Details","import React, {useState} from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\n\r\nconst GetPlayers = ({initValue = '', setValue}) => {\r\n  const [ players, setPlayers] = useState(initValue)\r\n  const parseNames = (names) =>\r\n    names\r\n      .split(\",\")\r\n      .map(name => name.trim())\r\n      .filter(name => name !== \"\")\r\n\r\n  return (\r\n    <div>\r\n      <Form.Group>\r\n      <Form.Label>Enter player names <strong>in order of play</strong>, comma-separated</Form.Label>\r\n      <Form.Control type=\"text\" value={players} onChange={event => setPlayers(event.target.value)} />\r\n      </Form.Group>\r\n      <Button variant=\"primary\" size=\"lg\" onClick={() => setValue(parseNames(players))}>Start!</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GetPlayers","import React, {useState, useEffect} from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { secondsToStr } from '../utils/helpers'\r\n\r\nconst Timer = ({ getValue, resetValue, initRunning = true }) => {\r\n  const [isRunning, setIsRunning] = useState(initRunning);\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n\r\n  useEffect(\r\n    () => {\r\n      let interval = setInterval(\r\n        () => isRunning ? setElapsedTime(elapsedTime + 1) : {},\r\n        1000\r\n      );\r\n      return () => clearInterval(interval);\r\n    },\r\n    [isRunning, elapsedTime]\r\n  )\r\n\r\n  useEffect(\r\n    () => getValue(elapsedTime),\r\n    [elapsedTime, getValue]\r\n  )\r\n \r\n  useEffect(\r\n    () => setElapsedTime(0),\r\n    [resetValue]\r\n  )\r\n\r\n  return (\r\n    <div className=\"timer-area\">\r\n      <span className=\"timer-numbers\">{secondsToStr(elapsedTime)}</span> {' '}\r\n      <Button \r\n        variant=\"outline-dark\" \r\n        size=\"lg\"\r\n        className=\"timer-btn\"\r\n        onClick={() => setIsRunning(!isRunning)}\r\n      >\r\n        {isRunning ? <>&#10074;&#10074;</> : <>&#9654;</>}\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Timer","import React, {useState, useEffect} from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { range } from '../utils/helpers'\r\n\r\nconst GetRoll = ({ getValue, resetValue }) => {\r\n  const possibleRolls = range(2, 12)\r\n  const [selectedRoll, setSelectedRoll] = useState()\r\n  \r\n  const rollClicked = (event) => {\r\n    const clicked = parseInt(event.target.value)\r\n    if (selectedRoll === clicked) {\r\n      setSelectedRoll()\r\n    } else {\r\n      setSelectedRoll(clicked)\r\n    }\r\n  }\r\n\r\n  useEffect(\r\n    () => getValue(selectedRoll),\r\n    [selectedRoll, getValue]\r\n  )\r\n\r\n  useEffect(\r\n    () => setSelectedRoll(),\r\n    [resetValue]\r\n  )\r\n\r\n  return (\r\n    <div className=\"rolls-selection\">\r\n      {possibleRolls.map(roll => \r\n        <Button \r\n          variant=\"outline-dark\"\r\n          size = \"md\"\r\n          key={roll} \r\n          onClick={rollClicked} \r\n          value={roll}\r\n          className={`roll ${roll === selectedRoll ? 'active' : ''}`}\r\n        >\r\n          {roll}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GetRoll","import React from 'react'\r\nimport { Table } from 'react-bootstrap'\r\nimport { secondsToStr } from '../utils/helpers'\r\n\r\nconst DisplayTurns = ({turns, players, currentPlayer}) => {\r\n  const cellWidthStr = `${100/players.length}%`\r\n  const playerTurns = (player) => turns.filter(turn => turn.player === player)\r\n  const averages = players.map((player, pid) => {\r\n    const turns = playerTurns(pid)\r\n    return turns.length === 0 ?\r\n      0 :\r\n      turns.reduce((sum, turn) => turn.time + sum, 0) / turns.length\r\n  })\r\n\r\n  return (\r\n    <div className=\"turn-table\">\r\n      <h2>Average Turn Length</h2>\r\n      <Table striped bordered hover size=\"sm\" width=\"100%\">\r\n        <thead>\r\n          <tr>\r\n            {players.map((player, idx) =>\r\n              <th \r\n                width={cellWidthStr} key={player} \r\n                className={`${idx === currentPlayer ? 'active' : ''}`}\r\n              >\r\n                {player}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            {averages.map((average, idx) =>\r\n              <td width={cellWidthStr} key={idx}>{secondsToStr(average)}</td>\r\n            )}\r\n          </tr>    \r\n        </tbody>\r\n      </Table>\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default DisplayTurns","import React from 'react'\r\nimport { BarChart, Tooltip, Bar, XAxis, YAxis } from 'recharts';\r\nimport { range } from '../utils/helpers'\r\n\r\nconst DisplayDice = ({turns}) => {\r\n  const possibleRolls = range(2, 12)\r\n  const rollsData = possibleRolls.map(roll => { \r\n    const freq = turns.filter(turn => turn.roll === roll).length\r\n    return {'roll' : roll, 'freq' : freq}\r\n  })\r\n\r\n  return (\r\n  <div>\r\n    <h2>Dice Rolls</h2>\r\n    <BarChart width={500} height={250} data={rollsData}>\r\n    <Tooltip />\r\n    <Bar dataKey='freq' fill='#8884d8'/>\r\n    <XAxis dataKey='roll' />\r\n    <YAxis />\r\n    </BarChart>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default DisplayDice","import React, { useState, useEffect } from 'react'\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Container, Row, Col, Button } from 'react-bootstrap'\n\nimport Turn from './classes/Turn'\nimport Header from './components/Header'\nimport StartTime from './components/StartTime'\nimport Details from './components/Details'\nimport GetPlayers from './components/GetPlayers'\nimport Timer from './components/Timer'\nimport GetRoll from './components/GetRoll'\nimport DisplayTurns from './components/DisplayTurns'\nimport DisplayDice from './components/DisplayDice'\n\nconst App = ({ defaultPlayers }) => {\n  const [ players, setPlayers] = useState([])\n  const [ currentPlayer, setCurrentPlayer] = useState(0)\n  const [ turns, setTurns ] = useState([])\n  \n  const [ startTime, setStartTime ] = useState()\n  const [ showDetails, setShowDetails ] = useState(false)\n  \n  const [ resetTimer, setResetTimer ] = useState(0)\n  const [ timer, setTimer ] = useState(0)\n  const [ resetRoll, setResetRoll ] = useState(0)\n  const [ roll, setRoll] = useState()\n\n  useEffect(\n    () => setStartTime(new Date()),\n    [players]\n  )\n\n  const endTurn = () => {\n    const prevTurn = new Turn(currentPlayer, timer, roll)\n    setTurns(turns.concat(prevTurn))\n\n    setResetRoll(resetRoll + 1)\n    setResetTimer(resetTimer + 1)\n\n    const nextPlayer = (currentPlayer + 1) % players.length\n    setCurrentPlayer(nextPlayer)\n  }\n\n  return (\n    <Container fluid>\n      <Header />\n      <Row>\n        <Col md={6} xl={4}>\n          <div className=\"main-panel\">\n            {players.length === 0 ?\n              <GetPlayers initValue={defaultPlayers} setValue={setPlayers} /> :\n              <div>\n                <StartTime time={startTime} />\n                <h3>{players[currentPlayer]}'s Turn</h3>\n                <Timer getValue={setTimer} resetValue={resetTimer} initRunning={false} />\n                <GetRoll getValue={setRoll} resetValue={resetRoll} />\n                <br />\n                <Button variant=\"primary\" size=\"lg\" onClick={() => endTurn()}><strong>End Turn</strong></Button>\n              </div>\n            }\n          </div>\n\n          {players.length === 0 ?\n            null :\n            <div className=\"details-section\">\n              <Button variant=\"link\" onClick={() => setShowDetails(!showDetails)}>{\n                showDetails ? 'Hide' : 'Show'} Turn Details\n              </Button>\n              {showDetails ?\n                <Details turns={turns} players={players} /> :\n                null\n              }\n            </div>\n          }\n        </Col>\n        <Col md={6} xl={8}>\n          {players.length === 0 ?\n            null :\n            <>\n            <DisplayTurns turns={turns} players={players} currentPlayer={currentPlayer} />\n            <DisplayDice turns={turns} />\n            </>\n          }\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App defaultPlayers='Dean, Ben, Aidan, Aba' />, \n  document.getElementById('root')\n)"],"sourceRoot":""}